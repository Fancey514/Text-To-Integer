// Take a value written out and convert it to a number
// Created by Jamie Fancey

// Import tokenizer and scanner
import java.util.StringTokenizer;
import java.util.Scanner;

public class Main {
    public static void main(String args[]) {

        // Declare and initialize arrays and variables
        String[] textArray = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", 
          "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twenty", "thirty", 
          "forty", "fifty", "sixty", "seventy", "eighty", "ninety", "hundred", "thousand", "million", "billion"};
        String[] numericalArray = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", 
          "16", "17", "18", "19", "20", "30", "40", "50", "60", "70", "80", "90", "00", ",", ",", ","};
        String inputText, appendText, temp, tempVerify = "", previousZero = "N/A", errorMessage = "", previousVerify = "";
        int i = 0;
        boolean removeZero = true, continueConvert = true, billionZeros = false, millionZeros = false, extraZeros = false, zeroGap = false;  
        
        StringBuilder  outputText = new StringBuilder("");                                      // Set String for output
        Scanner inText = new Scanner(System.in);                                                // Set scanner for input
        System.out.println("Please type a number. Ex: one thousand two hundred fifty two");     // Ask user to type out a number in text
        inputText = inText.nextLine();                                                          // Take in user's response
        inputText = inputText.toLowerCase();                                                    // Set text to lowercase for error-checking purposes
        
        StringTokenizer verifyToken = new StringTokenizer(inputText, " ");                                  // Set tokenizer to stop at each space for verifying
        while (verifyToken.hasMoreTokens()) {                                                               // Start a loop to verify entry
            boolean numFound = false;                                                                       // Set a boolean to make sure the token matches a number word
            tempVerify = verifyToken.nextToken();                                                           // Assign the next token to the temporary variable
            if (tempVerify.equals(",")) {                                                                   // Verify no commas were entered
                errorMessage = "No commas, please.";                                                        // Update errorMessage
                continueConvert = false;                                                                    // Set continueConvert to false
            }
            for (int l = 0; l < textArray.length; l++) {                                                    // Start a for loop to go through the textArray to match the token
                if (tempVerify.equals(textArray[l])) {
                    numFound = true;                                                                        // Set boolean to true if the word has a match
                }
                if (l < 27 && (tempVerify.equals(textArray[l]) && tempVerify.equals(previousVerify))) {     // Check that the current token doesn't match the previous token
                    errorMessage = "No numbers back-to-back.";                                              // Set the errorMessage variable if it does
                    continueConvert = false;                                                                // Set the continueConvert boolean to false so it doesn't attempt to convert to a number                
                }
            }
            if (!numFound) {
                errorMessage = "The entry is not a valid number.";                                          // If the number is not found, set the errrorMessage variable
                continueConvert = false;                                                                    // Set the continueConvert boolean to false so it doesn't attempt to convert to a number
            }
            if (!continueConvert) {
                break;                                                                                      // Break the loop if it can't be converted
            }
            previousVerify = tempVerify;                                                                    // Set the previous value to the current value before the loop restarts
        }
        
        if (continueConvert) {                                                                              // If the string passes verification, start converting
            StringTokenizer newToken = new StringTokenizer(inputText, " ");                                 // Set a tokenizer
            while (newToken.hasMoreTokens()) {                                                              // Start a loop to process each number
                i++;                                                                                        // Iterate i
                removeZero = true;                                                                          // Set removeZero to true by default at the beginnning of the loop in case it's false at some point before it loops
                temp = newToken.nextToken();                                                                // Assign the token to the temporary variable
                if (temp.equals("billion")) {
                    billionZeros = true;                                                                    // Flag that billion was the last comma value
                }
                else if (temp.equals("million")) {
                    billionZeros = false;                                                                   // Remove billion flag
                    millionZeros = true;                                                                    // Flag million as the last comma value
                }
                else if (temp.equals("thousand")) {
                    if (billionZeros) {                                                                     // If the current word is thousand, check if the billion flag is true
                        outputText.insert(outputText.indexOf(",") + 1, "000,");                             // If true, add "000," after the comma
                    }
                    billionZeros = false;                                                                   // Remove billion flag
                    millionZeros = false;                                                                   // Remove million flag
                }
                else if (temp.equals("hundred")) {
                    extraZeros = addExtras(i, inputText);                                                   // Check if extra zeros are needed to be added
                    zeroGap = addGap(i, inputText);                                                         // Check if zeros are needed to fill a gap
                    if (billionZeros && extraZeros) {                                                       // If the current word is hundred, check if billion flag is true
                        if (!zeroGap) {
                            outputText.insert(outputText.indexOf(",") + 1, "000,000,");                     // If true, add "000,000," after the comma
                        }
                    }
                    else if (millionZeros && extraZeros) {                                                  // Otherwise, if million is flagged as true
                        outputText.insert(outputText.lastIndexOf(",") + 1, "000,");                         // Insert "000," at the comma value
                    }
                }
                if (!previousZero.equals("N/A")) {                                                          // Check if previousZero has anything other than "N/A" assigned to it
                    if (previousZero.equals("00")) {                                                        // If previousZero is "00"
                        int j = 0, loopNum = 0;                                                             // Declare and initialize integers j and loopNum
                        while (loopNum == 0) {                                                              // Loop until loopNum is changed
                            if (temp.equals(textArray[j])) {                                                // When temp matches the current element of textArray
                                if (j < 9) {                                                                // If textArray[j] matches with a number fro, one to nine
                                    previousZero = "N/A";                                                   // Reasssign previousZero to "N/A"
                                    if (newToken.hasMoreTokens()) {                                         // As long as there's another word after the number
                                        removeZero = doubleOAfter(i, inputText);                            // Call the doubleOAfter method and assign removeZero with the returned boolean
                                    }
                                    if (removeZero) {                                                       // If a zero needs to be removed
                                        outputText.delete(outputText.length() - 1, outputText.length());    // Remove the zero
                                    }
                                }
                                else if (j > 8 && j < 27) {                                                 // If the value is higher than nine
                                    if (j > 18) {
                                        previousZero = numericalArray[j];                                   // Reassign previousZero with the current numerical value
                                    }
                                    outputText.delete(outputText.length() - 2, outputText.length());        // Remove both zeros
                                }
                                else if (j > 27) {                                                          // If the value is either thousand, million, or billion
                                    previousZero = numericalArray[j];                                       // Reassign previousZero with the current numerical value
                                }
                                temp = numericalArray[j];                                                   // Reassign the temporary variable to the current numerical value
                                loopNum++;                                                                  // increase the loopNum value to end the loop
                            }
                            j++;                                                                            // Increase j if the text value wasn't matched
                        }
                    }
                    else if (previousZero.equals(",")) {                                                    // Check if previousZero is a comma value
                        int j = 0, loopNum = 0;                                                             // Set variables to control the while loop
                        while (loopNum == 0) {                                                              // loop until the loopNum variable no longer equals 0
                            if (temp.equals(textArray[j])) {                                                // Check if the word matches the word in the current element of the textArray
                                if (j < 9) {                                                                // Check if the element number is less than 9
                                    previousZero = "N/A";                                                   // If so, set previousZero to "N/A"
                                    if (newToken.hasMoreTokens()) {                                         // Check if there are more tokens after the current number
                                        removeZero = doubleOAfter(i, inputText);                            // If so, call the doubleOAfter method to see if zeros need to be added prior to the value being added
                                    }
                                    if (removeZero) {                                                       // If true is returned
                                        if (billionZeros && !newToken.hasMoreTokens()) {                    // And the billion flag is true and there are no more words left
                                            outputText.append("000,000,00");                                // Add "000,000,00" to the outputText 
                                        }
                                        else if (millionZeros && !newToken.hasMoreTokens()) {               // However, if the million flag is true and there are no more words left
                                            outputText.append("000,00");                                    // Add "000,00" to the outputText
                                        }
                                        else {
                                            outputText.append("00");                                        // Otherwise, add "00" to the outputText
                                        }
                                    }
                                    
                                }
                                else if (j > 8 && j < 27) {                                                 // For all other values
                                    if (j > 18) {                                                           // If the element is over 18
                                        previousZero = numericalArray[j];                                   // Set previousZero to the numerical value  of that element
                                    }
                                    outputText.append("0");                                                 // Add "0" after the comma in outputText
                                }
                                temp = numericalArray[j];                                                   // Set temp to the numerical value of the word
                                loopNum++;                                                                  // Increase the loopNum variable to end the loop
                            }
                            j++;                                                                            // Increase the j variable
                        }
                    }
                    else {
                        if (newToken.hasMoreTokens() && (!temp.equals("thousand") && !temp.equals("million") && !temp.equals("billion"))) {
                            removeZero = doubleOAfter(i, inputText);                                        // Call doubleOAfter and assign result to removeZero variable if previousZero is from element 19 or above
                        }
                        
                        if (removeZero && (!temp.equals("thousand") && !temp.equals("million") && !temp.equals("billion"))) {
                            outputText.delete(outputText.length() - 1, outputText.length());                // If removeZero is true, remove the last 0
                        }
                    
                        int loopNum = 0, j = 0;                                                             // Set variables to control the loops
                        while (loopNum == 0) {                                                              // Loop while loopNum is unchanged
                            if (temp.equals(textArray[j])) {
                                temp = numericalArray[j];                                                   // Set temp to the numerical value when a matching word is found in the textArray
                                if (j > 8) {                                                                // If the element is greater than 8
                                    previousZero = temp;                                                    // Set previousZero to temp
                                }
                                else {
                                    previousZero = "N/A";                                                   // Otherwise, set previousZero to "N/A"
                                }
                                loopNum++;                                                                  // increase loopNum to end the whileloop
                            }
                            j++;                                                                            // Increase the j variable
                        }
                    }
                }
                else {                                                                                      // Otherwise, if there's "N/A" for previousZero
                    int loopNum = 0, j = 0;                                                                 // Set variables to control the loop
                    while (loopNum == 0) {                                                                  // While the loopNum variable is unchanged
                        if (temp.equals(textArray[j])) {                                                    // if the element in the textArray matches the word
                            temp = numericalArray[j];                                                       // Assign the element in the numericalArray to the temp variable
                            if  (j > 18) {                                                                  // if the element is greater than 18
                                previousZero = temp;                                                        // Assign temp to previousZero
                            }
                            loopNum++;                                                                      // Increase loopNum to control the loop
                        }
                        j++;                                                                                // Increase the element nuumber variable
                    }
                }
                outputText.append(temp);                                                                    // Append the temp value to the outputText String
            
            }
            if (previousZero.equals(",")) {                                                                 // If previousZero is a comma
                if (billionZeros) {                                                                         // And the billion flag is true
                    outputText.append("000,000,000");                                                       // Append "000,000,000" to outputText
                }
                else if (millionZeros) {                                                                    // Or, if the million flag is true
                    outputText.append("000,000");                                                           // Append "000,000" to outputText
                }
                else {
                    outputText.append("000");                                                               // Otherwise, append "000" to the outputText
                }
                
            }
            System.out.println(outputText);                                                                 // Display the full string on the screen
        }
        else {
            System.out.println(errorMessage);                                                               // Otherwise, if continueConvert is set to false, display the error message
        }
    }
    
    // Method for determining if a single digit number is followed by the word hundred
    public static boolean doubleOAfter(int i, String inText) {
        StringTokenizer doubleO = new StringTokenizer(inText, " ");
        String doubleTemp = "";
        boolean removeZero;
        for (int k = 0; k <= i; k++) {
            doubleTemp = doubleO.nextToken();
        }
        if (doubleTemp.equals("hundred")) {
            removeZero = false;
        }
        else {
            removeZero = true;
        }
        return removeZero;
    }
    
    // Method for determining if more zeros needed to be added to the output
    public static boolean addExtras(int i, String inText) {
        boolean extraZeros = true, billionVal = false, millionVal = false, thouVal = false;
        StringTokenizer zeroToken = new StringTokenizer(inText, " ");
        String zeroTemp = "";
        int k = 0;
        while (zeroToken.hasMoreTokens() && (k <= i + 3)) {
            zeroTemp = zeroToken.nextToken();
            if (zeroTemp.equals("billion")) {
                billionVal = true;
            }
            else if (zeroTemp.equals("million")) {
                millionVal = true;
            }
            else if (zeroTemp.equals("thousand")) {
                thouVal = true;
                billionVal = false;
            }
        }
        if ((billionVal && millionVal) || (millionVal && thouVal)) {
            extraZeros = false;
        }
        return extraZeros;
    }
    
    // Method to determine if a set of zeros need to fill a gap
    public static boolean addGap(int i, String inText) {
        boolean zeroGap = false, billionVal = false, millionVal = false, thouVal = false;
        StringTokenizer gapToken = new StringTokenizer(inText, " ");
        String gapTemp = "";
        int k = 0;
        while (gapToken.hasMoreTokens() && (k <= i + 3)) {
            gapTemp = gapToken.nextToken();
            if (gapTemp.equals("billion")) {
                billionVal = true;
            }
            else if (gapTemp.equals("million")) {
                millionVal = true;
            }
            else if (gapTemp.equals("thousand")) {
                thouVal = true;
            }
        }
        if (billionVal && !millionVal && thouVal) {
            zeroGap = true;
        }
        return zeroGap;
    }
}
